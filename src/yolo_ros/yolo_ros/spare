
yolo node working 

import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image, CameraInfo
from cv_bridge import CvBridge
from ultralytics import YOLO

class YoloRosNode(Node):
    def __init__(self):
        super().__init__('yolo_ros_node')
        self.bridge = CvBridge()

        # subscribe to your raw camera image
        self.image_sub = self.create_subscription(
            Image,
            '/camera/image_raw',
            self.image_callback,
            10
        )

        # subscribe to the camera info
        self.info_sub = self.create_subscription(
            CameraInfo,
            '/camera/camera_info',
            self.caminfo_callback,
            10
        )

        # publish annotated images
        self.image_pub = self.create_publisher(Image, '/yolo/image', 10)
        # republish camera_info for downstream nodes
        self.info_pub  = self.create_publisher(CameraInfo, '/yolo/camera_info', 10)

        # load your YOLO model
        self.model = YOLO('/home/jay/Documents/yolo11-tutorial/runs/detect/train17/weights/best.pt')

        self.get_logger().info("YOLO node up and running!")

    def caminfo_callback(self, info_msg: CameraInfo):
        # simply forward the incoming CameraInfo on to /yolo/camera_info
        self.info_pub.publish(info_msg)

    def image_callback(self, img_msg: Image):
        # convert ROS Image â†’ OpenCV BGR
        cv_img = self.bridge.imgmsg_to_cv2(img_msg, desired_encoding='bgr8')

        # run inference; returns a list of Results
        results = self.model(cv_img)

        # overlay boxes on the image
        annotated = results[0].plot()  # this returns a numpy array

        # convert back to ROS Image and publish
        out_msg = self.bridge.cv2_to_imgmsg(annotated, encoding='bgr8')
        out_msg.header = img_msg.header
        self.image_pub.publish(out_msg)

def main(args=None):
    rclpy.init(args=args)
    node = YoloRosNode()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()
